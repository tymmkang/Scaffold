# Scaffold를 사용하는 프로젝트 측에서 include 하는 공통 CMake 프로젝트 셋업 스크립트
#
# include 하기 전, 아래의 값들이 설정되어야 합니다.
# - SCAF_CONFIG_PROJECT_NAME : CMake 프로젝트의 이름
# - SCAF_CONFIG_SCAFFOLD_RELATIVE_DIR : Scaffold 디렉토리의 상대경로
#
# include 하기 전, 아래의 값들을 설정할 수 있습니다.
# - SCAF_OPTIONAL_CONFIG_MODULES_RELATIVE_DIR : 모듈 디렉토리의 상대경로 오버라이딩 (기본값 : "Modules")
# - SCAF_OPTIONAL_CONFIG_OUTPUT_RELATIVE_DIR : 출력 디렉토리의 상대경로 오버라이딩 (기본값 : "Output")
# - SCAF_OPTIONAL_CONFIG_FETCHCONTENT_RELATIVE_DIR : 외부 모듈 디렉토리의 상대경로 오버라이딩 (기본값 : "${CMAKE_BINARY_DIR}/FetchContent")

cmake_minimum_required(VERSION 3.20)
project(${SCAF_CONFIG_PROJECT_NAME})

# Scaffold global varaibles (readonly)
set(SCAF_CONFIG_PROJECT_ROOT_DIR ${PROJECT_SOURCE_DIR})
set(SCAF_CONFIG_SCAFFOLD_DIR ${SCAF_CONFIG_PROJECT_ROOT_DIR}/${SCAF_CONFIG_SCAFFOLD_RELATIVE_DIR})

set(SCAF_CONFIG_MODULES_RELATIVE_DIR "Modules")
if(DEFINED SCAF_OPTIONAL_CONFIG_MODULES_RELATIVE_DIR)
    set(SCAF_CONFIG_MODULES_RELATIVE_DIR ${SCAF_OPTIONAL_CONFIG_MODULES_RELATIVE_DIR})
endif()
set(SCAF_CONFIG_MODULES_DIR ${SCAF_CONFIG_PROJECT_ROOT_DIR}/${SCAF_CONFIG_MODULES_RELATIVE_DIR})

set(SCAF_CONFIG_OUTPUT_RELATIVE_DIR "Output")
if(DEFINED SCAF_OPTIONAL_CONFIG_OUTPUT_RELATIVE_DIR)
    set(SCAF_CONFIG_OUTPUT_RELATIVE_DIR ${SCAF_OPTIONAL_CONFIG_OUTPUT_RELATIVE_DIR})
endif()
set(SCAF_CONFIG_OUTPUT_DIR ${SCAF_CONFIG_PROJECT_ROOT_DIR}/${SCAF_CONFIG_OUTPUT_RELATIVE_DIR})

# TODO : 철거
# set(SCAF_CONFIG_EXTERNAL_MODULE_RELATIVE_DIR "Externals")
# set(SCAF_CONFIG_EXTERNAL_MODULE_PREFIX_DIR ${CMAKE_BINARY_DIR}/${SCAF_CONFIG_MODULES_RELATIVE_DIR}/${SCAF_CONFIG_EXTERNAL_MODULE_RELATIVE_DIR})

# Debug
set(CMAKE_CXX_FLAGS_DEBUG ${CMAKE_CXX_FLAGS_DEBUG})
set(CMAKE_EXE_LINKER_FLAGS_DEBUG ${CMAKE_EXE_LINKER_FLAGS_DEBUG})
set(CMAKE_SHARED_LINKER_FLAGS_DEBUG ${CMAKE_SHARED_LINKER_FLAGS_DEBUG})
add_compile_definitions("$<$<CONFIG:Debug>:DEBUG=1>")

# Release
set(CMAKE_CXX_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE})
set(CMAKE_EXE_LINKER_FLAGS_RELEASE ${CMAKE_EXE_LINKER_FLAGS_RELEASE})
set(CMAKE_SHARED_LINKER_FLAGS_RELEASE ${CMAKE_SHARED_LINKER_FLAGS_RELEASE})
add_compile_definitions("$<$<CONFIG:Release>:RELEASE=2>")

# CMake In-Built modules
include(ExternalProject)
include(FetchContent)

# FetchContent directory
set(SCAF_CONFIG_FETCH_CONTENT_DIR "${CMAKE_BINARY_DIR}/FetchContent")
if(DEFINED SCAF_OPTIONAL_CONFIG_FETCHCONTENT_RELATIVE_DIR)
    set(SCAF_CONFIG_FETCH_CONTENT_DIR "${SCAF_CONFIG_PROJECT_ROOT_DIR}/${SCAF_OPTIONAL_CONFIG_FETCHCONTENT_RELATIVE_DIR}")
    message(STATUS ${SCAF_CONFIG_FETCH_CONTENT_DIR})
endif()

# Hide FetchContent related options from CMake gui (HACK)
unset(FETCHCONTENT_BASE_DIR CACHE)
unset(FETCHCONTENT_QUIET CACHE)
unset(FETCHCONTENT_FULLY_DISCONNECTED CACHE)
unset(FETCHCONTENT_UPDATES_DISCONNECTED CACHE)
set(FETCHCONTENT_BASE_DIR ${SCAF_CONFIG_FETCH_CONTENT_DIR})
set(FETCHCONTENT_QUIET ON)
set(FETCHCONTENT_FULLY_DISCONNECTED OFF)
set(FETCHCONTENT_UPDATES_DISCONNECTED OFF)

# Include Scaffold utilities, externals
include(${SCAF_CONFIG_SCAFFOLD_DIR}/CMakeUtilities/CMakeLists.txt)
include(${SCAF_CONFIG_SCAFFOLD_DIR}/CMakeExternals/CMakeLists.txt)

set_property(GLOBAL PROPERTY USE_FOLDERS ON) 
